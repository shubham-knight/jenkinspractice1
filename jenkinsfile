#!groovy
pipeline{
 agent any
 
  tools {
    nodejs "node"
  }
//   environment{
//     sonar_token=credentials("")
//     dojo_sonar_url= 'URL'
//   }


stages{
        //stage('Code Clone from GIT'){
          //  steps{
            //    withCredentials()
            //}
        //}

        stage('Compile and Clean'){
            steps{
                script{
                       try{
                            bat "npm run clean"
                       }
                       catch(all){
                            echo "Compile and clean stage Failed"
                       }
                }
            }
        }

        stage('Test'){
                    steps{
                        script{
                               try{
                                    bat 'npm test'
                               }
                               catch(all){
                                    echo "Test stage Failed"
                               }
                        }
                    }
                }

        stage('Build'){
                    steps{
                        script{
                               try{
                                    bat 'npm build'
                               }
                               catch(all){
                                    echo "Build stage Failed. War file not created"
                               }
                        }
                    }
                }
        stage('Verify'){
            steps{
                script{
                       try{
                            bat "npm verify"
                       }
                       catch(all){
                            echo "Verify stage Failed"
                       }
                }
            }
        }

        stage('Install'){
            steps{
                script{
                       try{
                            bat "npm install"
                       }
                       catch(all){
                            echo "Install stage Failed"
                       }
                }
            }
        }


        stage('SonarQube Report'){
            steps{
                withSonarQubeEnv(installationName: 'SonarQube'){
                    bat 'npm run sonar'
                }
            }
//             post{
//                 always{
//                     junit allowEmptyResults: true,testResults: '**/test-results/*.xml'
//                 }
//                 failure{
//                     echo "Pipeline Failed"
//                 }
//             }
        }

//        stage('Code Coverage Report'){

        //}

        stage('Build Docker'){
            steps{
                script{
                     myapp="docker build -f dockerfile -t prodDevMicroService . "
                }
            }
        }

        stage('Push Docker image'){
            steps{
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                           myapp.push("latest")
                           myapp.push("${env.BUILD_ID}")
                       }
                }
            }
        }

        stage('Deployment on Kubernetes'){
            steps{
                scripts{
                    kubernetesDeploy(configs: "", kubeconfigId: "mykubeConfig")
                }
            }
        }


  }
//   catch(all) {
//          currentBuild.result = 'FAILURE'
//          //post {
//            //  always {
//              //        emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
//             // }
//         // }
//   }

  //finally {
    //     step $class: 'JUnitResultArchiver', testResults: '**/TEST-*.xml'
  //}

}

